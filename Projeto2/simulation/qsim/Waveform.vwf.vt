// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2018 17:16:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    EX_MEM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EX_MEM_vlg_sample_tst(
	CINCO,
	CLK,
	CLRN,
	ENA,
	M,
	ULA,
	WB,
	ZERO,
	sampler_tx
);
input [4:0] CINCO;
input  CLK;
input  CLRN;
input  ENA;
input [2:0] M;
input [31:0] ULA;
input [1:0] WB;
input  ZERO;
output sampler_tx;

reg sample;
time current_time;
always @(CINCO or CLK or CLRN or ENA or M or ULA or WB or ZERO)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module EX_MEM_vlg_check_tst (
	OUT_CINCO,
	OUT_M,
	OUT_ULA,
	OUT_WB,
	OUT_ZERO,
	sampler_rx
);
input [4:0] OUT_CINCO;
input [2:0] OUT_M;
input [31:0] OUT_ULA;
input [1:0] OUT_WB;
input  OUT_ZERO;
input sampler_rx;

reg [4:0] OUT_CINCO_expected;
reg [2:0] OUT_M_expected;
reg [31:0] OUT_ULA_expected;
reg [1:0] OUT_WB_expected;
reg  OUT_ZERO_expected;

reg [4:0] OUT_CINCO_prev;
reg [2:0] OUT_M_prev;
reg [31:0] OUT_ULA_prev;
reg [1:0] OUT_WB_prev;
reg  OUT_ZERO_prev;

reg [4:0] OUT_CINCO_expected_prev;
reg [2:0] OUT_M_expected_prev;
reg [31:0] OUT_ULA_expected_prev;
reg [1:0] OUT_WB_expected_prev;
reg  OUT_ZERO_expected_prev;

reg [4:0] last_OUT_CINCO_exp;
reg [2:0] last_OUT_M_exp;
reg [31:0] last_OUT_ULA_exp;
reg [1:0] last_OUT_WB_exp;
reg  last_OUT_ZERO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_CINCO_prev = OUT_CINCO;
	OUT_M_prev = OUT_M;
	OUT_ULA_prev = OUT_ULA;
	OUT_WB_prev = OUT_WB;
	OUT_ZERO_prev = OUT_ZERO;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_CINCO_expected_prev = OUT_CINCO_expected;
	OUT_M_expected_prev = OUT_M_expected;
	OUT_ULA_expected_prev = OUT_ULA_expected;
	OUT_WB_expected_prev = OUT_WB_expected;
	OUT_ZERO_expected_prev = OUT_ZERO_expected;
end


// expected OUT_CINCO[ 4 ]
initial
begin
	OUT_CINCO_expected[4] = 1'bX;
end 
// expected OUT_CINCO[ 3 ]
initial
begin
	OUT_CINCO_expected[3] = 1'bX;
end 
// expected OUT_CINCO[ 2 ]
initial
begin
	OUT_CINCO_expected[2] = 1'bX;
end 
// expected OUT_CINCO[ 1 ]
initial
begin
	OUT_CINCO_expected[1] = 1'bX;
end 
// expected OUT_CINCO[ 0 ]
initial
begin
	OUT_CINCO_expected[0] = 1'bX;
end 
// expected OUT_M[ 2 ]
initial
begin
	OUT_M_expected[2] = 1'bX;
end 
// expected OUT_M[ 1 ]
initial
begin
	OUT_M_expected[1] = 1'bX;
end 
// expected OUT_M[ 0 ]
initial
begin
	OUT_M_expected[0] = 1'bX;
end 
// expected OUT_ULA[ 31 ]
initial
begin
	OUT_ULA_expected[31] = 1'bX;
end 
// expected OUT_ULA[ 30 ]
initial
begin
	OUT_ULA_expected[30] = 1'bX;
end 
// expected OUT_ULA[ 29 ]
initial
begin
	OUT_ULA_expected[29] = 1'bX;
end 
// expected OUT_ULA[ 28 ]
initial
begin
	OUT_ULA_expected[28] = 1'bX;
end 
// expected OUT_ULA[ 27 ]
initial
begin
	OUT_ULA_expected[27] = 1'bX;
end 
// expected OUT_ULA[ 26 ]
initial
begin
	OUT_ULA_expected[26] = 1'bX;
end 
// expected OUT_ULA[ 25 ]
initial
begin
	OUT_ULA_expected[25] = 1'bX;
end 
// expected OUT_ULA[ 24 ]
initial
begin
	OUT_ULA_expected[24] = 1'bX;
end 
// expected OUT_ULA[ 23 ]
initial
begin
	OUT_ULA_expected[23] = 1'bX;
end 
// expected OUT_ULA[ 22 ]
initial
begin
	OUT_ULA_expected[22] = 1'bX;
end 
// expected OUT_ULA[ 21 ]
initial
begin
	OUT_ULA_expected[21] = 1'bX;
end 
// expected OUT_ULA[ 20 ]
initial
begin
	OUT_ULA_expected[20] = 1'bX;
end 
// expected OUT_ULA[ 19 ]
initial
begin
	OUT_ULA_expected[19] = 1'bX;
end 
// expected OUT_ULA[ 18 ]
initial
begin
	OUT_ULA_expected[18] = 1'bX;
end 
// expected OUT_ULA[ 17 ]
initial
begin
	OUT_ULA_expected[17] = 1'bX;
end 
// expected OUT_ULA[ 16 ]
initial
begin
	OUT_ULA_expected[16] = 1'bX;
end 
// expected OUT_ULA[ 15 ]
initial
begin
	OUT_ULA_expected[15] = 1'bX;
end 
// expected OUT_ULA[ 14 ]
initial
begin
	OUT_ULA_expected[14] = 1'bX;
end 
// expected OUT_ULA[ 13 ]
initial
begin
	OUT_ULA_expected[13] = 1'bX;
end 
// expected OUT_ULA[ 12 ]
initial
begin
	OUT_ULA_expected[12] = 1'bX;
end 
// expected OUT_ULA[ 11 ]
initial
begin
	OUT_ULA_expected[11] = 1'bX;
end 
// expected OUT_ULA[ 10 ]
initial
begin
	OUT_ULA_expected[10] = 1'bX;
end 
// expected OUT_ULA[ 9 ]
initial
begin
	OUT_ULA_expected[9] = 1'bX;
end 
// expected OUT_ULA[ 8 ]
initial
begin
	OUT_ULA_expected[8] = 1'bX;
end 
// expected OUT_ULA[ 7 ]
initial
begin
	OUT_ULA_expected[7] = 1'bX;
end 
// expected OUT_ULA[ 6 ]
initial
begin
	OUT_ULA_expected[6] = 1'bX;
end 
// expected OUT_ULA[ 5 ]
initial
begin
	OUT_ULA_expected[5] = 1'bX;
end 
// expected OUT_ULA[ 4 ]
initial
begin
	OUT_ULA_expected[4] = 1'bX;
end 
// expected OUT_ULA[ 3 ]
initial
begin
	OUT_ULA_expected[3] = 1'bX;
end 
// expected OUT_ULA[ 2 ]
initial
begin
	OUT_ULA_expected[2] = 1'bX;
end 
// expected OUT_ULA[ 1 ]
initial
begin
	OUT_ULA_expected[1] = 1'bX;
end 
// expected OUT_ULA[ 0 ]
initial
begin
	OUT_ULA_expected[0] = 1'bX;
end 
// expected OUT_WB[ 1 ]
initial
begin
	OUT_WB_expected[1] = 1'bX;
end 
// expected OUT_WB[ 0 ]
initial
begin
	OUT_WB_expected[0] = 1'bX;
end 

// expected OUT_ZERO
initial
begin
	OUT_ZERO_expected = 1'bX;
end 
// generate trigger
always @(OUT_CINCO_expected or OUT_CINCO or OUT_M_expected or OUT_M or OUT_ULA_expected or OUT_ULA or OUT_WB_expected or OUT_WB or OUT_ZERO_expected or OUT_ZERO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT_CINCO = %b | expected OUT_M = %b | expected OUT_ULA = %b | expected OUT_WB = %b | expected OUT_ZERO = %b | ",OUT_CINCO_expected_prev,OUT_M_expected_prev,OUT_ULA_expected_prev,OUT_WB_expected_prev,OUT_ZERO_expected_prev);
	$display("| real OUT_CINCO = %b | real OUT_M = %b | real OUT_ULA = %b | real OUT_WB = %b | real OUT_ZERO = %b | ",OUT_CINCO_prev,OUT_M_prev,OUT_ULA_prev,OUT_WB_prev,OUT_ZERO_prev);
`endif
	if (
		( OUT_CINCO_expected_prev[0] !== 1'bx ) && ( OUT_CINCO_prev[0] !== OUT_CINCO_expected_prev[0] )
		&& ((OUT_CINCO_expected_prev[0] !== last_OUT_CINCO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_CINCO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_CINCO_expected_prev);
		$display ("     Real value = %b", OUT_CINCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_CINCO_exp[0] = OUT_CINCO_expected_prev[0];
	end
	if (
		( OUT_CINCO_expected_prev[1] !== 1'bx ) && ( OUT_CINCO_prev[1] !== OUT_CINCO_expected_prev[1] )
		&& ((OUT_CINCO_expected_prev[1] !== last_OUT_CINCO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_CINCO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_CINCO_expected_prev);
		$display ("     Real value = %b", OUT_CINCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_CINCO_exp[1] = OUT_CINCO_expected_prev[1];
	end
	if (
		( OUT_CINCO_expected_prev[2] !== 1'bx ) && ( OUT_CINCO_prev[2] !== OUT_CINCO_expected_prev[2] )
		&& ((OUT_CINCO_expected_prev[2] !== last_OUT_CINCO_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_CINCO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_CINCO_expected_prev);
		$display ("     Real value = %b", OUT_CINCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_CINCO_exp[2] = OUT_CINCO_expected_prev[2];
	end
	if (
		( OUT_CINCO_expected_prev[3] !== 1'bx ) && ( OUT_CINCO_prev[3] !== OUT_CINCO_expected_prev[3] )
		&& ((OUT_CINCO_expected_prev[3] !== last_OUT_CINCO_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_CINCO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_CINCO_expected_prev);
		$display ("     Real value = %b", OUT_CINCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_CINCO_exp[3] = OUT_CINCO_expected_prev[3];
	end
	if (
		( OUT_CINCO_expected_prev[4] !== 1'bx ) && ( OUT_CINCO_prev[4] !== OUT_CINCO_expected_prev[4] )
		&& ((OUT_CINCO_expected_prev[4] !== last_OUT_CINCO_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_CINCO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_CINCO_expected_prev);
		$display ("     Real value = %b", OUT_CINCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_CINCO_exp[4] = OUT_CINCO_expected_prev[4];
	end
	if (
		( OUT_M_expected_prev[0] !== 1'bx ) && ( OUT_M_prev[0] !== OUT_M_expected_prev[0] )
		&& ((OUT_M_expected_prev[0] !== last_OUT_M_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_M[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_M_expected_prev);
		$display ("     Real value = %b", OUT_M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_M_exp[0] = OUT_M_expected_prev[0];
	end
	if (
		( OUT_M_expected_prev[1] !== 1'bx ) && ( OUT_M_prev[1] !== OUT_M_expected_prev[1] )
		&& ((OUT_M_expected_prev[1] !== last_OUT_M_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_M[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_M_expected_prev);
		$display ("     Real value = %b", OUT_M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_M_exp[1] = OUT_M_expected_prev[1];
	end
	if (
		( OUT_M_expected_prev[2] !== 1'bx ) && ( OUT_M_prev[2] !== OUT_M_expected_prev[2] )
		&& ((OUT_M_expected_prev[2] !== last_OUT_M_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_M[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_M_expected_prev);
		$display ("     Real value = %b", OUT_M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_M_exp[2] = OUT_M_expected_prev[2];
	end
	if (
		( OUT_ULA_expected_prev[0] !== 1'bx ) && ( OUT_ULA_prev[0] !== OUT_ULA_expected_prev[0] )
		&& ((OUT_ULA_expected_prev[0] !== last_OUT_ULA_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[0] = OUT_ULA_expected_prev[0];
	end
	if (
		( OUT_ULA_expected_prev[1] !== 1'bx ) && ( OUT_ULA_prev[1] !== OUT_ULA_expected_prev[1] )
		&& ((OUT_ULA_expected_prev[1] !== last_OUT_ULA_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[1] = OUT_ULA_expected_prev[1];
	end
	if (
		( OUT_ULA_expected_prev[2] !== 1'bx ) && ( OUT_ULA_prev[2] !== OUT_ULA_expected_prev[2] )
		&& ((OUT_ULA_expected_prev[2] !== last_OUT_ULA_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[2] = OUT_ULA_expected_prev[2];
	end
	if (
		( OUT_ULA_expected_prev[3] !== 1'bx ) && ( OUT_ULA_prev[3] !== OUT_ULA_expected_prev[3] )
		&& ((OUT_ULA_expected_prev[3] !== last_OUT_ULA_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[3] = OUT_ULA_expected_prev[3];
	end
	if (
		( OUT_ULA_expected_prev[4] !== 1'bx ) && ( OUT_ULA_prev[4] !== OUT_ULA_expected_prev[4] )
		&& ((OUT_ULA_expected_prev[4] !== last_OUT_ULA_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[4] = OUT_ULA_expected_prev[4];
	end
	if (
		( OUT_ULA_expected_prev[5] !== 1'bx ) && ( OUT_ULA_prev[5] !== OUT_ULA_expected_prev[5] )
		&& ((OUT_ULA_expected_prev[5] !== last_OUT_ULA_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[5] = OUT_ULA_expected_prev[5];
	end
	if (
		( OUT_ULA_expected_prev[6] !== 1'bx ) && ( OUT_ULA_prev[6] !== OUT_ULA_expected_prev[6] )
		&& ((OUT_ULA_expected_prev[6] !== last_OUT_ULA_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[6] = OUT_ULA_expected_prev[6];
	end
	if (
		( OUT_ULA_expected_prev[7] !== 1'bx ) && ( OUT_ULA_prev[7] !== OUT_ULA_expected_prev[7] )
		&& ((OUT_ULA_expected_prev[7] !== last_OUT_ULA_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[7] = OUT_ULA_expected_prev[7];
	end
	if (
		( OUT_ULA_expected_prev[8] !== 1'bx ) && ( OUT_ULA_prev[8] !== OUT_ULA_expected_prev[8] )
		&& ((OUT_ULA_expected_prev[8] !== last_OUT_ULA_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[8] = OUT_ULA_expected_prev[8];
	end
	if (
		( OUT_ULA_expected_prev[9] !== 1'bx ) && ( OUT_ULA_prev[9] !== OUT_ULA_expected_prev[9] )
		&& ((OUT_ULA_expected_prev[9] !== last_OUT_ULA_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[9] = OUT_ULA_expected_prev[9];
	end
	if (
		( OUT_ULA_expected_prev[10] !== 1'bx ) && ( OUT_ULA_prev[10] !== OUT_ULA_expected_prev[10] )
		&& ((OUT_ULA_expected_prev[10] !== last_OUT_ULA_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[10] = OUT_ULA_expected_prev[10];
	end
	if (
		( OUT_ULA_expected_prev[11] !== 1'bx ) && ( OUT_ULA_prev[11] !== OUT_ULA_expected_prev[11] )
		&& ((OUT_ULA_expected_prev[11] !== last_OUT_ULA_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[11] = OUT_ULA_expected_prev[11];
	end
	if (
		( OUT_ULA_expected_prev[12] !== 1'bx ) && ( OUT_ULA_prev[12] !== OUT_ULA_expected_prev[12] )
		&& ((OUT_ULA_expected_prev[12] !== last_OUT_ULA_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[12] = OUT_ULA_expected_prev[12];
	end
	if (
		( OUT_ULA_expected_prev[13] !== 1'bx ) && ( OUT_ULA_prev[13] !== OUT_ULA_expected_prev[13] )
		&& ((OUT_ULA_expected_prev[13] !== last_OUT_ULA_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[13] = OUT_ULA_expected_prev[13];
	end
	if (
		( OUT_ULA_expected_prev[14] !== 1'bx ) && ( OUT_ULA_prev[14] !== OUT_ULA_expected_prev[14] )
		&& ((OUT_ULA_expected_prev[14] !== last_OUT_ULA_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[14] = OUT_ULA_expected_prev[14];
	end
	if (
		( OUT_ULA_expected_prev[15] !== 1'bx ) && ( OUT_ULA_prev[15] !== OUT_ULA_expected_prev[15] )
		&& ((OUT_ULA_expected_prev[15] !== last_OUT_ULA_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[15] = OUT_ULA_expected_prev[15];
	end
	if (
		( OUT_ULA_expected_prev[16] !== 1'bx ) && ( OUT_ULA_prev[16] !== OUT_ULA_expected_prev[16] )
		&& ((OUT_ULA_expected_prev[16] !== last_OUT_ULA_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[16] = OUT_ULA_expected_prev[16];
	end
	if (
		( OUT_ULA_expected_prev[17] !== 1'bx ) && ( OUT_ULA_prev[17] !== OUT_ULA_expected_prev[17] )
		&& ((OUT_ULA_expected_prev[17] !== last_OUT_ULA_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[17] = OUT_ULA_expected_prev[17];
	end
	if (
		( OUT_ULA_expected_prev[18] !== 1'bx ) && ( OUT_ULA_prev[18] !== OUT_ULA_expected_prev[18] )
		&& ((OUT_ULA_expected_prev[18] !== last_OUT_ULA_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[18] = OUT_ULA_expected_prev[18];
	end
	if (
		( OUT_ULA_expected_prev[19] !== 1'bx ) && ( OUT_ULA_prev[19] !== OUT_ULA_expected_prev[19] )
		&& ((OUT_ULA_expected_prev[19] !== last_OUT_ULA_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[19] = OUT_ULA_expected_prev[19];
	end
	if (
		( OUT_ULA_expected_prev[20] !== 1'bx ) && ( OUT_ULA_prev[20] !== OUT_ULA_expected_prev[20] )
		&& ((OUT_ULA_expected_prev[20] !== last_OUT_ULA_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[20] = OUT_ULA_expected_prev[20];
	end
	if (
		( OUT_ULA_expected_prev[21] !== 1'bx ) && ( OUT_ULA_prev[21] !== OUT_ULA_expected_prev[21] )
		&& ((OUT_ULA_expected_prev[21] !== last_OUT_ULA_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[21] = OUT_ULA_expected_prev[21];
	end
	if (
		( OUT_ULA_expected_prev[22] !== 1'bx ) && ( OUT_ULA_prev[22] !== OUT_ULA_expected_prev[22] )
		&& ((OUT_ULA_expected_prev[22] !== last_OUT_ULA_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[22] = OUT_ULA_expected_prev[22];
	end
	if (
		( OUT_ULA_expected_prev[23] !== 1'bx ) && ( OUT_ULA_prev[23] !== OUT_ULA_expected_prev[23] )
		&& ((OUT_ULA_expected_prev[23] !== last_OUT_ULA_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[23] = OUT_ULA_expected_prev[23];
	end
	if (
		( OUT_ULA_expected_prev[24] !== 1'bx ) && ( OUT_ULA_prev[24] !== OUT_ULA_expected_prev[24] )
		&& ((OUT_ULA_expected_prev[24] !== last_OUT_ULA_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[24] = OUT_ULA_expected_prev[24];
	end
	if (
		( OUT_ULA_expected_prev[25] !== 1'bx ) && ( OUT_ULA_prev[25] !== OUT_ULA_expected_prev[25] )
		&& ((OUT_ULA_expected_prev[25] !== last_OUT_ULA_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[25] = OUT_ULA_expected_prev[25];
	end
	if (
		( OUT_ULA_expected_prev[26] !== 1'bx ) && ( OUT_ULA_prev[26] !== OUT_ULA_expected_prev[26] )
		&& ((OUT_ULA_expected_prev[26] !== last_OUT_ULA_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[26] = OUT_ULA_expected_prev[26];
	end
	if (
		( OUT_ULA_expected_prev[27] !== 1'bx ) && ( OUT_ULA_prev[27] !== OUT_ULA_expected_prev[27] )
		&& ((OUT_ULA_expected_prev[27] !== last_OUT_ULA_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[27] = OUT_ULA_expected_prev[27];
	end
	if (
		( OUT_ULA_expected_prev[28] !== 1'bx ) && ( OUT_ULA_prev[28] !== OUT_ULA_expected_prev[28] )
		&& ((OUT_ULA_expected_prev[28] !== last_OUT_ULA_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[28] = OUT_ULA_expected_prev[28];
	end
	if (
		( OUT_ULA_expected_prev[29] !== 1'bx ) && ( OUT_ULA_prev[29] !== OUT_ULA_expected_prev[29] )
		&& ((OUT_ULA_expected_prev[29] !== last_OUT_ULA_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[29] = OUT_ULA_expected_prev[29];
	end
	if (
		( OUT_ULA_expected_prev[30] !== 1'bx ) && ( OUT_ULA_prev[30] !== OUT_ULA_expected_prev[30] )
		&& ((OUT_ULA_expected_prev[30] !== last_OUT_ULA_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[30] = OUT_ULA_expected_prev[30];
	end
	if (
		( OUT_ULA_expected_prev[31] !== 1'bx ) && ( OUT_ULA_prev[31] !== OUT_ULA_expected_prev[31] )
		&& ((OUT_ULA_expected_prev[31] !== last_OUT_ULA_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ULA_expected_prev);
		$display ("     Real value = %b", OUT_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_ULA_exp[31] = OUT_ULA_expected_prev[31];
	end
	if (
		( OUT_WB_expected_prev[0] !== 1'bx ) && ( OUT_WB_prev[0] !== OUT_WB_expected_prev[0] )
		&& ((OUT_WB_expected_prev[0] !== last_OUT_WB_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_WB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_WB_expected_prev);
		$display ("     Real value = %b", OUT_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_WB_exp[0] = OUT_WB_expected_prev[0];
	end
	if (
		( OUT_WB_expected_prev[1] !== 1'bx ) && ( OUT_WB_prev[1] !== OUT_WB_expected_prev[1] )
		&& ((OUT_WB_expected_prev[1] !== last_OUT_WB_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_WB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_WB_expected_prev);
		$display ("     Real value = %b", OUT_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_WB_exp[1] = OUT_WB_expected_prev[1];
	end
	if (
		( OUT_ZERO_expected_prev !== 1'bx ) && ( OUT_ZERO_prev !== OUT_ZERO_expected_prev )
		&& ((OUT_ZERO_expected_prev !== last_OUT_ZERO_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_ZERO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_ZERO_expected_prev);
		$display ("     Real value = %b", OUT_ZERO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_ZERO_exp = OUT_ZERO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module EX_MEM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] CINCO;
reg CLK;
reg CLRN;
reg ENA;
reg [2:0] M;
reg [31:0] ULA;
reg [1:0] WB;
reg ZERO;
// wires                                               
wire [4:0] OUT_CINCO;
wire [2:0] OUT_M;
wire [31:0] OUT_ULA;
wire [1:0] OUT_WB;
wire OUT_ZERO;

wire sampler;                             

// assign statements (if any)                          
EX_MEM i1 (
// port map - connection between master ports and signals/registers   
	.CINCO(CINCO),
	.CLK(CLK),
	.CLRN(CLRN),
	.ENA(ENA),
	.M(M),
	.OUT_CINCO(OUT_CINCO),
	.OUT_M(OUT_M),
	.OUT_ULA(OUT_ULA),
	.OUT_WB(OUT_WB),
	.OUT_ZERO(OUT_ZERO),
	.ULA(ULA),
	.WB(WB),
	.ZERO(ZERO)
);
// CINCO[ 4 ]
initial
begin
	CINCO[4] = 1'b1;
	CINCO[4] = #600000 1'b0;
	CINCO[4] = #50000 1'b1;
	CINCO[4] = #50000 1'b0;
	CINCO[4] = #50000 1'b1;
	CINCO[4] = #100000 1'b0;
end 
// CINCO[ 3 ]
initial
begin
	CINCO[3] = 1'b1;
	CINCO[3] = #100000 1'b0;
	CINCO[3] = #100000 1'b1;
	CINCO[3] = #100000 1'b0;
	CINCO[3] = #50000 1'b1;
	CINCO[3] = #150000 1'b0;
	CINCO[3] = #150000 1'b1;
	CINCO[3] = #50000 1'b0;
	CINCO[3] = #100000 1'b1;
	CINCO[3] = #100000 1'b0;
end 
// CINCO[ 2 ]
initial
begin
	CINCO[2] = 1'b1;
	CINCO[2] = #100000 1'b0;
	CINCO[2] = #50000 1'b1;
	CINCO[2] = #50000 1'b0;
	CINCO[2] = #50000 1'b1;
	CINCO[2] = #50000 1'b0;
	CINCO[2] = #50000 1'b1;
	CINCO[2] = #100000 1'b0;
	CINCO[2] = #100000 1'b1;
	CINCO[2] = #100000 1'b0;
	CINCO[2] = #50000 1'b1;
	CINCO[2] = #200000 1'b0;
end 
// CINCO[ 1 ]
initial
begin
	CINCO[1] = 1'b0;
	CINCO[1] = #50000 1'b1;
	CINCO[1] = #50000 1'b0;
	CINCO[1] = #50000 1'b1;
	CINCO[1] = #100000 1'b0;
	CINCO[1] = #50000 1'b1;
	CINCO[1] = #100000 1'b0;
	CINCO[1] = #50000 1'b1;
	CINCO[1] = #50000 1'b0;
	CINCO[1] = #200000 1'b1;
	CINCO[1] = #250000 1'b0;
end 
// CINCO[ 0 ]
initial
begin
	CINCO[0] = 1'b0;
	CINCO[0] = #100000 1'b1;
	CINCO[0] = #100000 1'b0;
	CINCO[0] = #50000 1'b1;
	CINCO[0] = #50000 1'b0;
	CINCO[0] = #150000 1'b1;
	CINCO[0] = #50000 1'b0;
	CINCO[0] = #50000 1'b1;
	CINCO[0] = #50000 1'b0;
	CINCO[0] = #50000 1'b1;
	CINCO[0] = #100000 1'b0;
	CINCO[0] = #50000 1'b1;
	CINCO[0] = #50000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 

// CLRN
initial
begin
	CLRN = 1'b1;
end 

// ENA
initial
begin
	ENA = 1'b1;
end 
// M[ 2 ]
initial
begin
	M[2] = 1'b1;
	M[2] = #100000 1'b0;
	M[2] = #50000 1'b1;
	M[2] = #50000 1'b0;
	M[2] = #100000 1'b1;
	M[2] = #200000 1'b0;
	M[2] = #150000 1'b1;
	M[2] = #50000 1'b0;
	M[2] = #150000 1'b1;
	M[2] = #50000 1'b0;
end 
// M[ 1 ]
initial
begin
	M[1] = 1'b1;
	M[1] = #100000 1'b0;
	M[1] = #100000 1'b1;
	M[1] = #50000 1'b0;
	M[1] = #50000 1'b1;
	M[1] = #50000 1'b0;
	M[1] = #50000 1'b1;
	M[1] = #50000 1'b0;
	M[1] = #50000 1'b1;
	M[1] = #100000 1'b0;
	M[1] = #50000 1'b1;
	M[1] = #150000 1'b0;
	M[1] = #50000 1'b1;
	M[1] = #100000 1'b0;
end 
// M[ 0 ]
initial
begin
	M[0] = 1'b1;
	M[0] = #100000 1'b0;
	M[0] = #150000 1'b1;
	M[0] = #50000 1'b0;
	M[0] = #100000 1'b1;
	M[0] = #50000 1'b0;
	M[0] = #200000 1'b1;
	M[0] = #250000 1'b0;
end 
// ULA[ 31 ]
initial
begin
	ULA[31] = 1'b0;
	ULA[31] = #250000 1'b1;
	ULA[31] = #50000 1'b0;
	ULA[31] = #50000 1'b1;
	ULA[31] = #50000 1'b0;
	ULA[31] = #50000 1'b1;
	ULA[31] = #150000 1'b0;
	ULA[31] = #50000 1'b1;
	ULA[31] = #100000 1'b0;
	ULA[31] = #150000 1'b1;
	ULA[31] = #50000 1'b0;
end 
// ULA[ 30 ]
initial
begin
	ULA[30] = 1'b1;
	ULA[30] = #100000 1'b0;
	ULA[30] = #250000 1'b1;
	ULA[30] = #50000 1'b0;
	ULA[30] = #50000 1'b1;
	ULA[30] = #150000 1'b0;
	ULA[30] = #50000 1'b1;
	ULA[30] = #100000 1'b0;
	ULA[30] = #50000 1'b1;
	ULA[30] = #50000 1'b0;
	ULA[30] = #50000 1'b1;
	ULA[30] = #50000 1'b0;
end 
// ULA[ 29 ]
initial
begin
	ULA[29] = 1'b0;
	ULA[29] = #150000 1'b1;
	ULA[29] = #100000 1'b0;
	ULA[29] = #100000 1'b1;
	ULA[29] = #100000 1'b0;
	ULA[29] = #50000 1'b1;
	ULA[29] = #50000 1'b0;
	ULA[29] = #200000 1'b1;
	ULA[29] = #50000 1'b0;
	ULA[29] = #100000 1'b1;
	ULA[29] = #50000 1'b0;
end 
// ULA[ 28 ]
initial
begin
	ULA[28] = 1'b0;
	ULA[28] = #50000 1'b1;
	ULA[28] = #100000 1'b0;
	ULA[28] = #100000 1'b1;
	ULA[28] = #100000 1'b0;
	ULA[28] = #150000 1'b1;
	ULA[28] = #50000 1'b0;
	ULA[28] = #50000 1'b1;
	ULA[28] = #50000 1'b0;
	ULA[28] = #50000 1'b1;
	ULA[28] = #200000 1'b0;
end 
// ULA[ 27 ]
initial
begin
	ULA[27] = 1'b1;
	ULA[27] = #250000 1'b0;
	ULA[27] = #100000 1'b1;
	ULA[27] = #50000 1'b0;
	ULA[27] = #100000 1'b1;
	ULA[27] = #50000 1'b0;
	ULA[27] = #50000 1'b1;
	ULA[27] = #300000 1'b0;
end 
// ULA[ 26 ]
initial
begin
	ULA[26] = 1'b0;
	ULA[26] = #150000 1'b1;
	ULA[26] = #50000 1'b0;
	ULA[26] = #50000 1'b1;
	ULA[26] = #150000 1'b0;
	ULA[26] = #150000 1'b1;
	ULA[26] = #50000 1'b0;
	ULA[26] = #300000 1'b1;
end 
// ULA[ 25 ]
initial
begin
	ULA[25] = 1'b0;
	ULA[25] = #50000 1'b1;
	ULA[25] = #50000 1'b0;
	ULA[25] = #100000 1'b1;
	ULA[25] = #100000 1'b0;
	ULA[25] = #200000 1'b1;
	ULA[25] = #150000 1'b0;
	ULA[25] = #50000 1'b1;
	ULA[25] = #50000 1'b0;
	ULA[25] = #50000 1'b1;
	ULA[25] = #50000 1'b0;
	ULA[25] = #50000 1'b1;
end 
// ULA[ 24 ]
initial
begin
	ULA[24] = 1'b1;
	ULA[24] = #50000 1'b0;
	ULA[24] = #50000 1'b1;
	ULA[24] = #50000 1'b0;
	ULA[24] = #100000 1'b1;
	ULA[24] = #100000 1'b0;
	ULA[24] = #50000 1'b1;
	ULA[24] = #100000 1'b0;
	ULA[24] = #50000 1'b1;
	ULA[24] = #50000 1'b0;
	ULA[24] = #50000 1'b1;
	ULA[24] = #50000 1'b0;
	ULA[24] = #50000 1'b1;
	ULA[24] = #100000 1'b0;
	ULA[24] = #50000 1'b1;
	ULA[24] = #50000 1'b0;
end 
// ULA[ 23 ]
initial
begin
	ULA[23] = 1'b1;
	ULA[23] = #50000 1'b0;
	ULA[23] = #200000 1'b1;
	ULA[23] = #100000 1'b0;
	ULA[23] = #50000 1'b1;
	ULA[23] = #100000 1'b0;
	ULA[23] = #50000 1'b1;
	ULA[23] = #200000 1'b0;
	ULA[23] = #50000 1'b1;
	ULA[23] = #50000 1'b0;
	ULA[23] = #50000 1'b1;
end 
// ULA[ 22 ]
initial
begin
	ULA[22] = 1'b0;
	ULA[22] = #50000 1'b1;
	ULA[22] = #50000 1'b0;
	ULA[22] = #250000 1'b1;
	ULA[22] = #50000 1'b0;
	ULA[22] = #50000 1'b1;
	ULA[22] = #100000 1'b0;
	ULA[22] = #100000 1'b1;
	ULA[22] = #50000 1'b0;
	ULA[22] = #100000 1'b1;
	ULA[22] = #150000 1'b0;
end 
// ULA[ 21 ]
initial
begin
	ULA[21] = 1'b1;
	ULA[21] = #50000 1'b0;
	ULA[21] = #50000 1'b1;
	ULA[21] = #100000 1'b0;
	ULA[21] = #50000 1'b1;
	ULA[21] = #100000 1'b0;
	ULA[21] = #50000 1'b1;
	ULA[21] = #250000 1'b0;
	ULA[21] = #50000 1'b1;
	ULA[21] = #100000 1'b0;
end 
// ULA[ 20 ]
initial
begin
	ULA[20] = 1'b0;
	ULA[20] = #100000 1'b1;
	ULA[20] = #50000 1'b0;
	ULA[20] = #200000 1'b1;
	ULA[20] = #50000 1'b0;
	ULA[20] = #200000 1'b1;
	ULA[20] = #50000 1'b0;
	ULA[20] = #50000 1'b1;
	ULA[20] = #50000 1'b0;
	ULA[20] = #50000 1'b1;
	ULA[20] = #100000 1'b0;
	ULA[20] = #50000 1'b1;
end 
// ULA[ 19 ]
initial
begin
	ULA[19] = 1'b0;
	ULA[19] = #50000 1'b1;
	ULA[19] = #150000 1'b0;
	ULA[19] = #50000 1'b1;
	ULA[19] = #50000 1'b0;
	ULA[19] = #200000 1'b1;
	ULA[19] = #100000 1'b0;
	ULA[19] = #50000 1'b1;
	ULA[19] = #150000 1'b0;
	ULA[19] = #50000 1'b1;
end 
// ULA[ 18 ]
initial
begin
	ULA[18] = 1'b0;
	ULA[18] = #50000 1'b1;
	ULA[18] = #100000 1'b0;
	ULA[18] = #100000 1'b1;
	ULA[18] = #150000 1'b0;
	ULA[18] = #100000 1'b1;
	ULA[18] = #50000 1'b0;
	ULA[18] = #50000 1'b1;
	ULA[18] = #100000 1'b0;
	ULA[18] = #100000 1'b1;
	ULA[18] = #50000 1'b0;
	ULA[18] = #100000 1'b1;
end 
// ULA[ 17 ]
initial
begin
	ULA[17] = 1'b0;
	ULA[17] = #50000 1'b1;
	ULA[17] = #50000 1'b0;
	ULA[17] = #200000 1'b1;
	ULA[17] = #50000 1'b0;
	ULA[17] = #200000 1'b1;
	ULA[17] = #100000 1'b0;
	ULA[17] = #50000 1'b1;
	ULA[17] = #100000 1'b0;
	ULA[17] = #100000 1'b1;
end 
// ULA[ 16 ]
initial
begin
	ULA[16] = 1'b1;
	ULA[16] = #50000 1'b0;
	ULA[16] = #50000 1'b1;
	ULA[16] = #100000 1'b0;
	ULA[16] = #100000 1'b1;
	ULA[16] = #100000 1'b0;
	ULA[16] = #50000 1'b1;
	ULA[16] = #50000 1'b0;
	ULA[16] = #50000 1'b1;
	ULA[16] = #150000 1'b0;
	ULA[16] = #50000 1'b1;
	ULA[16] = #50000 1'b0;
	ULA[16] = #150000 1'b1;
end 
// ULA[ 15 ]
initial
begin
	ULA[15] = 1'b1;
	ULA[15] = #50000 1'b0;
	ULA[15] = #50000 1'b1;
	ULA[15] = #50000 1'b0;
	ULA[15] = #100000 1'b1;
	ULA[15] = #100000 1'b0;
	ULA[15] = #100000 1'b1;
	ULA[15] = #50000 1'b0;
	ULA[15] = #150000 1'b1;
	ULA[15] = #100000 1'b0;
	ULA[15] = #100000 1'b1;
	ULA[15] = #100000 1'b0;
end 
// ULA[ 14 ]
initial
begin
	ULA[14] = 1'b1;
	ULA[14] = #50000 1'b0;
	ULA[14] = #50000 1'b1;
	ULA[14] = #50000 1'b0;
	ULA[14] = #50000 1'b1;
	ULA[14] = #50000 1'b0;
	ULA[14] = #300000 1'b1;
	ULA[14] = #200000 1'b0;
	ULA[14] = #50000 1'b1;
	ULA[14] = #100000 1'b0;
	ULA[14] = #50000 1'b1;
end 
// ULA[ 13 ]
initial
begin
	ULA[13] = 1'b0;
	ULA[13] = #100000 1'b1;
	ULA[13] = #50000 1'b0;
	ULA[13] = #50000 1'b1;
	ULA[13] = #100000 1'b0;
	ULA[13] = #200000 1'b1;
	ULA[13] = #150000 1'b0;
end 
// ULA[ 12 ]
initial
begin
	ULA[12] = 1'b0;
	ULA[12] = #50000 1'b1;
	ULA[12] = #50000 1'b0;
	ULA[12] = #300000 1'b1;
	ULA[12] = #100000 1'b0;
	ULA[12] = #50000 1'b1;
	ULA[12] = #100000 1'b0;
	ULA[12] = #50000 1'b1;
	ULA[12] = #50000 1'b0;
end 
// ULA[ 11 ]
initial
begin
	ULA[11] = 1'b0;
	ULA[11] = #50000 1'b1;
	ULA[11] = #50000 1'b0;
	ULA[11] = #250000 1'b1;
	ULA[11] = #50000 1'b0;
	ULA[11] = #100000 1'b1;
	ULA[11] = #100000 1'b0;
	ULA[11] = #100000 1'b1;
	ULA[11] = #100000 1'b0;
	ULA[11] = #50000 1'b1;
end 
// ULA[ 10 ]
initial
begin
	ULA[10] = 1'b0;
	ULA[10] = #50000 1'b1;
	ULA[10] = #50000 1'b0;
	ULA[10] = #50000 1'b1;
	ULA[10] = #50000 1'b0;
	ULA[10] = #50000 1'b1;
	ULA[10] = #150000 1'b0;
	ULA[10] = #300000 1'b1;
	ULA[10] = #100000 1'b0;
end 
// ULA[ 9 ]
initial
begin
	ULA[9] = 1'b1;
	ULA[9] = #50000 1'b0;
	ULA[9] = #50000 1'b1;
	ULA[9] = #50000 1'b0;
	ULA[9] = #50000 1'b1;
	ULA[9] = #50000 1'b0;
	ULA[9] = #100000 1'b1;
	ULA[9] = #100000 1'b0;
	ULA[9] = #100000 1'b1;
	ULA[9] = #50000 1'b0;
	ULA[9] = #50000 1'b1;
	ULA[9] = #150000 1'b0;
	ULA[9] = #50000 1'b1;
	ULA[9] = #50000 1'b0;
end 
// ULA[ 8 ]
initial
begin
	ULA[8] = 1'b1;
	ULA[8] = #100000 1'b0;
	ULA[8] = #50000 1'b1;
	ULA[8] = #50000 1'b0;
	ULA[8] = #50000 1'b1;
	ULA[8] = #50000 1'b0;
	ULA[8] = #100000 1'b1;
	ULA[8] = #50000 1'b0;
	ULA[8] = #50000 1'b1;
	ULA[8] = #50000 1'b0;
	ULA[8] = #50000 1'b1;
	ULA[8] = #50000 1'b0;
	ULA[8] = #50000 1'b1;
	ULA[8] = #50000 1'b0;
	ULA[8] = #50000 1'b1;
	ULA[8] = #50000 1'b0;
end 
// ULA[ 7 ]
initial
begin
	ULA[7] = 1'b1;
	ULA[7] = #50000 1'b0;
	ULA[7] = #100000 1'b1;
	ULA[7] = #150000 1'b0;
	ULA[7] = #150000 1'b1;
	ULA[7] = #150000 1'b0;
	ULA[7] = #50000 1'b1;
	ULA[7] = #50000 1'b0;
	ULA[7] = #150000 1'b1;
	ULA[7] = #50000 1'b0;
	ULA[7] = #50000 1'b1;
end 
// ULA[ 6 ]
initial
begin
	ULA[6] = 1'b1;
	ULA[6] = #50000 1'b0;
	ULA[6] = #50000 1'b1;
	ULA[6] = #100000 1'b0;
	ULA[6] = #50000 1'b1;
	ULA[6] = #100000 1'b0;
	ULA[6] = #50000 1'b1;
	ULA[6] = #200000 1'b0;
	ULA[6] = #50000 1'b1;
	ULA[6] = #50000 1'b0;
	ULA[6] = #100000 1'b1;
	ULA[6] = #100000 1'b0;
	ULA[6] = #50000 1'b1;
end 
// ULA[ 5 ]
initial
begin
	ULA[5] = 1'b0;
	ULA[5] = #50000 1'b1;
	ULA[5] = #100000 1'b0;
	ULA[5] = #150000 1'b1;
	ULA[5] = #250000 1'b0;
	ULA[5] = #50000 1'b1;
	ULA[5] = #200000 1'b0;
end 
// ULA[ 4 ]
initial
begin
	ULA[4] = 1'b0;
	ULA[4] = #200000 1'b1;
	ULA[4] = #100000 1'b0;
	ULA[4] = #100000 1'b1;
	ULA[4] = #50000 1'b0;
	ULA[4] = #150000 1'b1;
	ULA[4] = #250000 1'b0;
end 
// ULA[ 3 ]
initial
begin
	ULA[3] = 1'b1;
	ULA[3] = #50000 1'b0;
	ULA[3] = #100000 1'b1;
	ULA[3] = #50000 1'b0;
	ULA[3] = #250000 1'b1;
	ULA[3] = #100000 1'b0;
	ULA[3] = #100000 1'b1;
	ULA[3] = #100000 1'b0;
	ULA[3] = #100000 1'b1;
	ULA[3] = #100000 1'b0;
end 
// ULA[ 2 ]
initial
begin
	ULA[2] = 1'b1;
	ULA[2] = #150000 1'b0;
	ULA[2] = #50000 1'b1;
	ULA[2] = #50000 1'b0;
	ULA[2] = #50000 1'b1;
	ULA[2] = #50000 1'b0;
	ULA[2] = #50000 1'b1;
	ULA[2] = #50000 1'b0;
	ULA[2] = #150000 1'b1;
	ULA[2] = #50000 1'b0;
	ULA[2] = #50000 1'b1;
	ULA[2] = #100000 1'b0;
	ULA[2] = #50000 1'b1;
	ULA[2] = #100000 1'b0;
end 
// ULA[ 1 ]
initial
begin
	ULA[1] = 1'b0;
	ULA[1] = #200000 1'b1;
	ULA[1] = #50000 1'b0;
	ULA[1] = #200000 1'b1;
	ULA[1] = #150000 1'b0;
	ULA[1] = #100000 1'b1;
	ULA[1] = #150000 1'b0;
	ULA[1] = #100000 1'b1;
end 
// ULA[ 0 ]
initial
begin
	ULA[0] = 1'b0;
	ULA[0] = #50000 1'b1;
	ULA[0] = #50000 1'b0;
	ULA[0] = #50000 1'b1;
	ULA[0] = #250000 1'b0;
	ULA[0] = #100000 1'b1;
	ULA[0] = #100000 1'b0;
	ULA[0] = #50000 1'b1;
	ULA[0] = #50000 1'b0;
	ULA[0] = #150000 1'b1;
	ULA[0] = #50000 1'b0;
end 
// WB[ 1 ]
initial
begin
	WB[1] = 1'b0;
	WB[1] = #100000 1'b1;
	WB[1] = #50000 1'b0;
	WB[1] = #50000 1'b1;
	WB[1] = #150000 1'b0;
	WB[1] = #50000 1'b1;
	WB[1] = #200000 1'b0;
	WB[1] = #100000 1'b1;
	WB[1] = #50000 1'b0;
	WB[1] = #50000 1'b1;
	WB[1] = #50000 1'b0;
end 
// WB[ 0 ]
initial
begin
	WB[0] = 1'b1;
	WB[0] = #300000 1'b0;
	WB[0] = #50000 1'b1;
	WB[0] = #50000 1'b0;
	WB[0] = #150000 1'b1;
	WB[0] = #50000 1'b0;
	WB[0] = #100000 1'b1;
	WB[0] = #150000 1'b0;
	WB[0] = #50000 1'b1;
	WB[0] = #50000 1'b0;
end 

// ZERO
initial
begin
	ZERO = 1'b1;
	ZERO = #50000 1'b0;
	ZERO = #200000 1'b1;
	ZERO = #200000 1'b0;
	ZERO = #50000 1'b1;
	ZERO = #50000 1'b0;
	ZERO = #50000 1'b1;
	ZERO = #100000 1'b0;
	ZERO = #50000 1'b1;
	ZERO = #200000 1'b0;
end 

EX_MEM_vlg_sample_tst tb_sample (
	.CINCO(CINCO),
	.CLK(CLK),
	.CLRN(CLRN),
	.ENA(ENA),
	.M(M),
	.ULA(ULA),
	.WB(WB),
	.ZERO(ZERO),
	.sampler_tx(sampler)
);

EX_MEM_vlg_check_tst tb_out(
	.OUT_CINCO(OUT_CINCO),
	.OUT_M(OUT_M),
	.OUT_ULA(OUT_ULA),
	.OUT_WB(OUT_WB),
	.OUT_ZERO(OUT_ZERO),
	.sampler_rx(sampler)
);
endmodule

