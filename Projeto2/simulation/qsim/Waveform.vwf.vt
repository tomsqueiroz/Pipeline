// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2018 18:57:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    COMPARADOR32bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module COMPARADOR32bits_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module COMPARADOR32bits_vlg_check_tst (
	OUT_COMPARA,
	sampler_rx
);
input  OUT_COMPARA;
input sampler_rx;

reg  OUT_COMPARA_expected;

reg  OUT_COMPARA_prev;

reg  OUT_COMPARA_expected_prev;

reg  last_OUT_COMPARA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_COMPARA_prev = OUT_COMPARA;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_COMPARA_expected_prev = OUT_COMPARA_expected;
end



// expected OUT_COMPARA
initial
begin
	OUT_COMPARA_expected = 1'bX;
end 
// generate trigger
always @(OUT_COMPARA_expected or OUT_COMPARA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT_COMPARA = %b | ",OUT_COMPARA_expected_prev);
	$display("| real OUT_COMPARA = %b | ",OUT_COMPARA_prev);
`endif
	if (
		( OUT_COMPARA_expected_prev !== 1'bx ) && ( OUT_COMPARA_prev !== OUT_COMPARA_expected_prev )
		&& ((OUT_COMPARA_expected_prev !== last_OUT_COMPARA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_COMPARA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_COMPARA_expected_prev);
		$display ("     Real value = %b", OUT_COMPARA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_COMPARA_exp = OUT_COMPARA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module COMPARADOR32bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
// wires                                               
wire OUT_COMPARA;

wire sampler;                             

// assign statements (if any)                          
COMPARADOR32bits i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.OUT_COMPARA(OUT_COMPARA)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #640000 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #320000 1'b1;
	A[3] = #320000 1'b0;
	A[3] = #320000 1'b1;
end 
// A[ 2 ]
initial
begin
	repeat(3)
	begin
		A[2] = 1'b0;
		A[2] = #160000 1'b1;
		# 160000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	repeat(6)
	begin
		A[1] = 1'b0;
		A[1] = #80000 1'b1;
		# 80000;
	end
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	repeat(12)
	begin
		A[0] = 1'b0;
		A[0] = #40000 1'b1;
		# 40000;
	end
	A[0] = 1'b0;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
	B[24] = #320000 1'b1;
	B[24] = #40000 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #160000 1'b1;
	B[6] = #40000 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #640000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #320000 1'b1;
	B[3] = #320000 1'b0;
	B[3] = #320000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #160000 1'b1;
	B[2] = #160000 1'b0;
	B[2] = #160000 1'b1;
	B[2] = #160000 1'b0;
	B[2] = #160000 1'b1;
	B[2] = #160000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #80000 1'b1;
	# 80000;
	repeat(3)
	begin
		B[1] = 1'b0;
		B[1] = #80000 1'b1;
		# 80000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(2)
	begin
		B[0] = 1'b0;
		B[0] = #40000 1'b1;
		# 40000;
	end
	B[0] = 1'b0;
	B[0] = #40000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #40000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #40000 1'b1;
	# 40000;
	repeat(7)
	begin
		B[0] = 1'b0;
		B[0] = #40000 1'b1;
		# 40000;
	end
	B[0] = 1'b0;
end 

COMPARADOR32bits_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

COMPARADOR32bits_vlg_check_tst tb_out(
	.OUT_COMPARA(OUT_COMPARA),
	.sampler_rx(sampler)
);
endmodule

